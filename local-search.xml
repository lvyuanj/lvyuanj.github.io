<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决/var/lib/docker/overlay2占用很大、容器无法启动问题（清理磁盘）</title>
    <link href="/2023/11/12/docker/"/>
    <url>/2023/11/12/docker/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-解决-var-lib-docker-overlay2占用很大、容器无法启动问题（清理磁盘）"><a href="#Docker-解决-var-lib-docker-overlay2占用很大、容器无法启动问题（清理磁盘）" class="headerlink" title="Docker - 解决&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2占用很大、容器无法启动问题（清理磁盘）"></a>Docker - 解决&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2占用很大、容器无法启动问题（清理磁盘）</h2><h2 id="一、首先执行如下命令可以查看-docker-文件夹磁盘使用情况："><a href="#一、首先执行如下命令可以查看-docker-文件夹磁盘使用情况：" class="headerlink" title="一、首先执行如下命令可以查看 docker 文件夹磁盘使用情况："></a>一、首先执行如下命令可以查看 docker 文件夹磁盘使用情况：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pi ~]<span class="hljs-comment"># du -hs /var/lib/docker/</span><br>17G     /var/lib/docker/<br>12<br></code></pre></td></tr></table></figure><h2 id="二、执行如下可以查看-Docker-的磁盘使用情况（类似于-Linux-上的-df-命令）"><a href="#二、执行如下可以查看-Docker-的磁盘使用情况（类似于-Linux-上的-df-命令）" class="headerlink" title="二、执行如下可以查看 Docker 的磁盘使用情况（类似于 Linux 上的 df 命令）"></a>二、执行如下可以查看 Docker 的磁盘使用情况（类似于 Linux 上的 df 命令）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pi ~]<span class="hljs-comment"># docker system df</span><br>TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE<br>Images              4                   2                   1.659GB             268.9MB (16%)<br>Containers          2                   2                   1.037GB             0B (0%)<br>Local Volumes       0                   0                   0B                  0B<br>Build Cache         0                   0                   0B                  0B<br>123456<br></code></pre></td></tr></table></figure><h2 id="三、-docker-system-prune-a命令清理得更加彻底，可以将没有容器使用-Docker-镜像都删掉"><a href="#三、-docker-system-prune-a命令清理得更加彻底，可以将没有容器使用-Docker-镜像都删掉" class="headerlink" title="三、 docker system prune -a命令清理得更加彻底，可以将没有容器使用 Docker 镜像都删掉"></a>三、 docker system prune -a命令清理得更加彻底，可以将没有容器使用 Docker 镜像都删掉</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pi ~]<span class="hljs-comment">#  docker system prune -a </span><br>WARNING! This will remove:<br>  - all stopped containers<br>  - all networks not used by at least one container<br>  - all images without at least one container associated to them<br>  - all build cache<br><br>Are you sure you want to <span class="hljs-built_in">continue</span>? [y/N] y<br>Total reclaimed space: 0B<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rsync详解</title>
    <link href="/2023/11/12/rsync%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5/"/>
    <url>/2023/11/12/rsync%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="rsync详解"><a href="#rsync详解" class="headerlink" title="rsync详解"></a>rsync详解</h1><h3 id="一、rsync介绍"><a href="#一、rsync介绍" class="headerlink" title="一、rsync介绍"></a>一、<a href="https://so.csdn.net/so/search?q=rsync&spm=1001.2101.3001.7020">rsync</a>介绍</h3><h4 id="1、rsync是什么"><a href="#1、rsync是什么" class="headerlink" title="1、rsync是什么"></a>1、rsync是什么</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs wiki">rsync（remote synchronize）是Liunx/Unix下的一个远程数据同步工具。<br>它可通过LAN/WAN快速同步多台主机间的文件和目录，并适当利用rsync算法（差分编码）以减少数据的传输。<br><br>rsync算法并不是每一次都整份传输，而是只传输两个文件的不同部分，因此其传输速度相当快。<br><br>除此之外，rsync可拷贝、显示目录属性，以及拷贝文件，并可选择性的压缩以及递归拷贝。<br><br></code></pre></td></tr></table></figure><h4 id="2、rsync的工作原理"><a href="#2、rsync的工作原理" class="headerlink" title="2、rsync的工作原理"></a>2、rsync的工作原理</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">a</span>、客户端构造FileList，FileList包含了需要与服务器同步的所有文件信息对<span class="hljs-keyword">name</span>-&gt;</span>id<br>（id用来唯一表示文件例如MD5）<br><br>b、客户端将FileList发送到服务器。<br><br>c、服务器上rsync处理客户端发过来的FileList，构建新的NewFileList。<br> 其中根据MD5值比较，删除服务器上已经存在的文件信息对，只保留服务器上不存在或变化的文件。<br><br>d、客户端得到服务器发送过来的NewFileList，然后把NewFileList中的文件重新传输到服务器。<br></code></pre></td></tr></table></figure><h4 id="3、rsync优点"><a href="#3、rsync优点" class="headerlink" title="3、rsync优点"></a>3、rsync优点</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>）可以镜像保存整个目录树和文件系统。<br><br><span class="hljs-number">2</span>）可以很容易做到保持原来文件的权限、时间、软硬连接等。<br><br><span class="hljs-number">3</span>）无需特殊权限即可安装。<br><br><span class="hljs-number">4</span>）快速：第一次同步时rsync复制全部内容，但在下一次值传输修改过的内容<br><br><span class="hljs-number">5</span>）压缩传输：rysnc在传输的过程中可以实行压缩及解压缩操作，可以使用更少的带宽<br><br><span class="hljs-number">6</span>）安全：可以使用<span class="hljs-keyword">scp、ssh等方式来进行文件传输</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">7</span>）支持匿名传输，以方便进行网站镜像<br><br><span class="hljs-number">8</span>）rsync不仅可以远程同步数据（类似于<span class="hljs-keyword">scp），而且可以本地同步数据（类似于cp），做差异同步</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">9</span>）openssh <span class="hljs-number">8</span>.<span class="hljs-number">0</span>已经把<span class="hljs-keyword">scp标记为过时不建议使用了。建议用sftp或者rsync替代scp</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># 需要在Liunx/Unix服务器之间互传海量数据时，建议选择rsync进行传输</span><br><br></code></pre></td></tr></table></figure><h4 id="4、rsync认证方式"><a href="#4、rsync认证方式" class="headerlink" title="4、rsync认证方式"></a>4、rsync认证方式</h4><p>rsync有两种常用的认证方式，一种是rsync-daemon方式，另外一种是ssh方式。</p><p>在平时使用过程，我们使用最多的是rsync-daemon方式。</p><p><strong>注意：在使用rsync时，服务器和客户端都必须安装rsync程序</strong>。</p><p><strong>rsync-daemon 认证</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs wiki">rsync在rsync-daemon认证方式下，默认监听TCP的873端口。<br><br>rsync-daemon认证方式是rsync的主要认证方式，这个也是我们经常使用的认证方式。<br>并且也只有在此种模式下，rsync才可以把密码写入到一个文件中。<br><br>注意：<br>rsync-daemon认证方式，需要服务器和客户端都安装rsync服务<br>并且只需要rsync服务器端启动rsync，同时配置rsync配置文件。<br>客户端启动不启动rsync服务，都不影响同步的正常进行。<br><br></code></pre></td></tr></table></figure><p><strong>ssh认证</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs elixir">rsync在ssh认证方式下，可通过系统用户进行认证，即在rsync上通过ssh隧道进行传输，类似于scp工具。<br>此时同步操作不在局限于rsync中定义的同步文件夹。<br><br>注意：<br>ssh认证方式，不需要服务器和客户端配置rsync配置文件<br>只需要双方都安装rsync服务，并且也不需要双方启动rsync。<br><br><span class="hljs-comment"># 若rsync服务端SSH为标准端口，此时rsync使用方式如下：</span><br><br>rsync -avz /root/test root<span class="hljs-variable">@10</span>.<span class="hljs-number">10.10</span>.<span class="hljs-number">10</span><span class="hljs-symbol">:/root/</span><br><br><br><span class="hljs-comment"># 若rsync服务端SSH为非标准端口，可通过rsync的-e参数进行端口指定。使用方式如下：</span><br><br>rsync -avz /root/test -e <span class="hljs-string">&#x27;ssh -p1234&#x27;</span> root<span class="hljs-variable">@10</span>.<span class="hljs-number">10.10</span>.<span class="hljs-number">10</span><span class="hljs-symbol">:/root/</span><br><br></code></pre></td></tr></table></figure><h3 id="二、安装rsync"><a href="#二、安装rsync" class="headerlink" title="二、安装rsync"></a>二、安装rsync</h3><blockquote><p>安装rsync，我们可以分为两种方式：源码方式安装和RPM方式安装。</p><p><strong>注意：rsync软件无论是服务器端还是客户端都是同一个软件包。</strong></p></blockquote><h4 id="1、源码方式安装"><a href="#1、源码方式安装" class="headerlink" title="1、源码方式安装"></a>1、源码方式安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 源码方式安装rsync，需要到其官网下载对应的安装包。rsync官网：rsync.samba.org </span><br><br><span class="hljs-number">1</span>)、下载<br>wget https:<span class="hljs-regexp">//</span>download.samba.org<span class="hljs-regexp">/pub/</span>rsync<span class="hljs-regexp">/src/</span>rsync-<span class="hljs-number">3.2</span>.<span class="hljs-number">3</span>.tar.gz<br><br><span class="hljs-number">2</span>)、解压并安装<br>tar -xvf rsync-<span class="hljs-number">3.2</span>.<span class="hljs-number">3</span>.tar.gz<br><br><span class="hljs-number">3</span>)、编译安装<br><span class="hljs-comment"># 源码安装rsync时，其编译时所需要的gcc库文件尽量提前安装完毕</span><br><span class="hljs-comment"># 默认安装到/usr/local/目录下</span><br>./configure<br>make &amp;&amp;make install<br><br><span class="hljs-number">4</span>)、设置开机启动<br>echo “<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>rsync --daemon -config=<span class="hljs-regexp">/etc/</span>rsyncd.conf” &gt;&gt;<span class="hljs-regexp">/etc/</span>profile<br><br></code></pre></td></tr></table></figure><h4 id="2、-yum方式安装"><a href="#2、-yum方式安装" class="headerlink" title="2、 yum方式安装"></a>2、 yum方式安装</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">yum -y install  rsync<br><br><span class="hljs-comment">#设置开机启动</span><br><span class="hljs-keyword">echo</span> “<span class="hljs-string">/usr/local/bin/rsync</span> <span class="hljs-params">--daemon</span> -config=<span class="hljs-string">/etc/rsyncd.conf</span>” &gt;&gt;<span class="hljs-string">/etc/profile</span><br><br></code></pre></td></tr></table></figure><h3 id="三、配置rsync-daemon"><a href="#三、配置rsync-daemon" class="headerlink" title="三、配置rsync daemon"></a>三、配置rsync daemon</h3><blockquote><p>rsync的配置分为服务器端和客户端</p><p>使用rsync协议，需要服务端启动<a href="https://so.csdn.net/so/search?q=%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B&spm=1001.2101.3001.7020">守护进程</a></p></blockquote><p><strong>1、服务端配置</strong></p><ul><li><p><strong>准备rsync配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以 rsync 用户启动进程</span><br>uid = rsync<br>gid = rsync<br><br> <span class="hljs-comment"># 无需让rsync以root身份运行，允许接收文件的完整属性</span><br>fake super = <span class="hljs-built_in">yes</span>       <br><br><span class="hljs-comment"># 禁锢推送的数据至某个目录, 不允许跳出该目录</span><br>use <span class="hljs-built_in">chroot</span> = no                <br><br>max connections = 200          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-built_in">timeout</span> = 600                  <span class="hljs-comment"># 超时时间</span><br>ignore errors                  <span class="hljs-comment"># 忽略错误信息</span><br><br><span class="hljs-built_in">read</span> only = <span class="hljs-literal">false</span>              <span class="hljs-comment"># 对备份数据可读写</span><br><br>list = <span class="hljs-literal">false</span>                   <span class="hljs-comment"># 不允许查看模块信息</span><br><br><span class="hljs-comment"># 定义虚拟用户，作为连接认证用户</span><br>auth <span class="hljs-built_in">users</span> = myuser <br><br><span class="hljs-comment"># 定义rsync服务用户连接认证密码文件路径</span><br>secrets file = /etc/rsync.passwd<br><br><span class="hljs-comment">#### 定义模块信息</span><br>[backup]                <br>comment = commit        <span class="hljs-comment"># 模块注释信息</span><br>path = /backup          <span class="hljs-comment"># 定义接收备份数据目录</span><br><br><span class="hljs-comment"># 只允许10.10.10段ip连接</span><br>hosts allow = 10.10.10.0/24<br><br></code></pre></td></tr></table></figure><ul><li><p><strong>配置并启动守护进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 需要一个rsync进程运行时使用的普通用户 rsync</span><br>useradd rsync -M -s /sbin/nologin<br><br><span class="hljs-comment"># 服务端需要定义一个客户端连接    虚拟用户名和密码</span><br><span class="hljs-comment"># 密码文件形式  user:passwd</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;myuser:password&quot;</span> &gt; /etc/rsync.passwd<br><span class="hljs-built_in">chmod</span> 600 /etc/rsync.passwd<br><br><span class="hljs-comment"># 准备模块定义好的目录,客户端的数据都存放在该目录下</span><br><span class="hljs-built_in">mkdir</span> /backup<br><span class="hljs-built_in">chown</span> -R rsync.rsync /backup<br><br><span class="hljs-comment"># 启动服务</span><br>rsync --daemon<br><br><span class="hljs-comment"># 查看服务</span><br>ps aux | grep rsync<br>netstat -lntp|grep 873<br><br></code></pre></td></tr></table></figure><p><strong>2、客户端使用</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs perl"><br><span class="hljs-comment"># 在客户端安装完毕rsync服务后，是不需要启动rsync服务的。</span><br><span class="hljs-comment"># 我们只需要在客户端创建连接rsync服务器时，验证码用户所需要的密码文件即可。</span><br><span class="hljs-comment"># 该密码文件中的密码要与rsync服务器上的密码文件中的密码对应</span><br><span class="hljs-comment"># 并且也要与rsync服务器rsyncd.conf配置文件中的认证模块中的用户匹配。</span><br><br>echo “password”&gt;&gt;<span class="hljs-regexp">/etc/rs</span>ync.passwd<br><br><span class="hljs-keyword">chmod</span> <span class="hljs-number">600</span> /etc/rsync.passwd<br><br><br><span class="hljs-comment"># 查看 rsync 守护程序分配的所有 module 列表，可以执行下面命令。</span><br>rsync rsync:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span><br><br><br><span class="hljs-comment"># 具体写法是服务器与目标目录之间使用双冒号分隔`::`</span><br><span class="hljs-comment"># 地址中的module并不是实际路径名，而是 rsync 守护程序指定的模块名</span><br><br><span class="hljs-comment"># 把本地的文件同步到远程服务器</span><br><span class="hljs-comment"># rsync [OPTION]… [SRC]… [USER@]HOST::DEST</span><br><span class="hljs-comment"># rsync [选项] [--port=]  [--password-file=] [/local/path] [用户名]@服务端IP::[模块名]</span><br><br>rsync -av --password-file=<span class="hljs-regexp">/etc/rs</span>ync.passwd <span class="hljs-keyword">local</span>/ myuser@10.<span class="hljs-number">10.10</span>.<span class="hljs-number">10</span>::backup<br><br><span class="hljs-comment"># 把远程机器的文件同步到本地</span><br><span class="hljs-comment"># rsync [OPTION]… [USER@]HOST::SRC [DEST]</span><br><span class="hljs-comment"># rsync [选项] [--port=] [--password-file=] [用户名@]服务端IP::[模块名]  [/local/path]</span><br><br>rsync -av --password-file=<span class="hljs-regexp">/etc/rs</span>ync.passwd myuser@10.<span class="hljs-number">10.10</span>.<span class="hljs-number">10</span>::backup <span class="hljs-keyword">local</span>/<br><br><br></code></pre></td></tr></table></figure><h3 id="四、rsync使用"><a href="#四、rsync使用" class="headerlink" title="四、rsync使用"></a>四、rsync使用</h3><h4 id="1、同步模式模式"><a href="#1、同步模式模式" class="headerlink" title="1、同步模式模式"></a>1、同步模式模式</h4><h5 id="1-1-本地同步"><a href="#1-1-本地同步" class="headerlink" title="1.1 本地同步"></a>1.1 本地同步</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">##本地  rsync   选项       源      目标</span><br>Local:  rsync [OPTION.<span class="hljs-string">..</span>] SRC.<span class="hljs-string">..</span> [DEST]<br><br><span class="hljs-comment">#将/etc目录备份到/opt目录下，和cp的区别在于会自动增量备份</span><br>rsync -avz <span class="hljs-string">/etc</span> <span class="hljs-string">/opt</span><br><br></code></pre></td></tr></table></figure><h5 id="1-2远程同步"><a href="#1-2远程同步" class="headerlink" title="1.2远程同步"></a>1.2远程同步</h5><h6 id="ssh协议"><a href="#ssh协议" class="headerlink" title="ssh协议"></a><strong>ssh协议</strong></h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 默认使用 SSH 进行远程登录和数据传输</span><br><span class="hljs-comment"># 不需要做任何配置，需要都安装rsync，操作上类似scp</span><br><br><span class="hljs-comment">#将远端文件拉（下载）到本地</span><br><span class="hljs-title class_">Pull</span>: rsync [<span class="hljs-variable constant_">OPTION</span>...] [<span class="hljs-variable constant_">USER</span>@]<span class="hljs-variable constant_">HOST</span><span class="hljs-symbol">:SRC</span>... [<span class="hljs-variable constant_">DEST</span>]<br>         <br><span class="hljs-comment">#将本地文件推送（上传）到远端</span><br><span class="hljs-title class_">Push</span>: rsync [<span class="hljs-variable constant_">OPTION</span>...] <span class="hljs-variable constant_">SRC</span>... [<span class="hljs-variable constant_">USER</span>@]<span class="hljs-variable constant_">HOST</span><span class="hljs-symbol">:DEST</span><br> <br><span class="hljs-comment">#将etc推送到10.10.10.10下的自定义文件夹下</span><br>rsync -az /etc/ <span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span><span class="hljs-symbol">:/opt/etc-</span><span class="hljs-variable">$(</span>hostname)-<span class="hljs-variable">$(</span>date +%F)<br><br></code></pre></td></tr></table></figure><h6 id="rsync协议"><a href="#rsync协议" class="headerlink" title="rsync协议"></a>rsync协议</h6><blockquote><p>使用rsync协议，需要服务端启动守护进程</p><p>操作参考 <a href="https://blog.csdn.net/wq1205750492/article/details/124497271#jump">配置rsync daemon</a></p></blockquote><h4 id="2、命令参数"><a href="#2、命令参数" class="headerlink" title="2、命令参数"></a>2、命令参数</h4><p>常用参数</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-v, –verbose详细模式输出。</span><br><br><span class="hljs-deletion">-a, –archive归档模式，表示以递归方式传输文件，并保持所有文件属性不变。</span><br><br><span class="hljs-deletion">-z, –compress对备份的文件在传输时进行压缩处理。</span><br><br>–delete：删除那些DST中存在而在SRC中没有的文件。<br><br></code></pre></td></tr></table></figure><p>所有参数</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a：–archive archive mode 权限保存模式，相当于 -rlptgoD 参数，存档，递归，保持属性等。</span><br><span class="hljs-deletion">-r：–recursive 复制所有下面的资料，递归处理。</span><br><span class="hljs-deletion">-p：–perms 保留档案权限，文件原有属性。</span><br><span class="hljs-deletion">-t：–times 保留时间点，文件原有时间。</span><br><span class="hljs-deletion">-g：–group 保留原有属组。</span><br><span class="hljs-deletion">-o：–owner 保留档案所有者(root only)。</span><br><span class="hljs-deletion">-D：–devices 保留device资讯(root only)。</span><br><span class="hljs-deletion">-l：–links 复制所有的连接，拷贝连接文件。</span><br><span class="hljs-deletion">-z：–compress 压缩模式，当资料在传送到目的端进行档案压缩。</span><br><span class="hljs-deletion">-H：–hard-links 保留硬链接文件。</span><br><span class="hljs-deletion">-A：–acls 保留ACL属性文件，需要配合–perms。</span><br><span class="hljs-deletion">-P：-P参数和 --partial --progress 相同，只是为了把参数简单化，表示传进度。</span><br><span class="hljs-deletion">--version：输出rsync版本。</span><br><span class="hljs-deletion">-v：–verbose 复杂的输出信息。</span><br><span class="hljs-deletion">-u：–update 仅仅进行更新，也就是跳过已经存在的目标位置，并且文件时间要晚于要备份的文件，不覆盖新的文件。</span><br><span class="hljs-deletion">--port=PORT：定义rsyncd(daemon)要运行的port(预设为tcp 873)。</span><br><br><span class="hljs-deletion">--delete：删除那些目标位置有的文件而备份源没有的文件。</span><br><br><span class="hljs-deletion">--delete-before: 接收者在传输之前进行删除操作</span><br><br><span class="hljs-deletion">--password-file=FILE ：从 指定密码文件中获取密码。</span><br><span class="hljs-deletion">--bwlimit=KBPS：限制 I/O 带宽。</span><br><span class="hljs-deletion">--filter “-filename”：需要过滤的文件。</span><br><span class="hljs-deletion">--exclude=filname：需要过滤的文件。</span><br><span class="hljs-deletion">--progress：显示备份过程。</span><br><br></code></pre></td></tr></table></figure><h3 id="五、示例"><a href="#五、示例" class="headerlink" title="五、示例"></a>五、示例</h3><h4 id="1、常用示例"><a href="#1、常用示例" class="headerlink" title="1、常用示例"></a>1、常用示例</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 将当前目录下所有文件同步到远端</span><br>rsync -avzP ./* myuser<span class="hljs-variable">@10</span>.<span class="hljs-number">10.10</span>.<span class="hljs-number">15</span>::backup <br><br><span class="hljs-comment"># 从服务端同步数据到本地</span><br>rsync -avzP  myuser<span class="hljs-variable">@10</span>.<span class="hljs-number">10.10</span>.<span class="hljs-number">15</span>::backup .<br><br><span class="hljs-comment"># 保持服务端于客户端上数据完全一致，服务端有则同步给客户端，服务端没有，客户端有的则从客户端删除</span><br><span class="hljs-comment"># –delete 选项，表示客户端上的数据要与服务器端完全一致,多则删之，少则补之</span><br><span class="hljs-comment"># 用的时候要小心点，最好不要把已经有重要数所据的目录，当做本地更新目录，否则会把你的数据全部删除</span><br>rsync -avzP  --delete myuser<span class="hljs-variable">@10</span>.<span class="hljs-number">10.10</span>.<span class="hljs-number">15</span>::backup  /tmp/test/<br><br><span class="hljs-comment"># 下面的 rsync 命令将10.10.10.10主机上的 /www 目录（不包含 /www/logs 和 /www/conf子目录）复制到本地的 /backup/www/ </span><br>rsync -avzP --delete --exclude <span class="hljs-string">&quot;logs/&quot;</span> --exclude <span class="hljs-string">&quot;conf/&quot;</span>  \<br><span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span><span class="hljs-symbol">:/www/</span> /backup/www/<br><br><br></code></pre></td></tr></table></figure><h4 id="2、快速删除大量数据"><a href="#2、快速删除大量数据" class="headerlink" title="2、快速删除大量数据"></a>2、快速删除大量数据</h4><p><strong>1、在<code>need_delete</code> 目录下建立30万个文件</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">time</span> for i in $(seq <span class="hljs-number">1</span> <span class="hljs-number">300000</span>)<br><span class="hljs-attribute">do</span><br><span class="hljs-attribute">echo</span> test &gt;&gt;$i.txt<br><span class="hljs-attribute">done</span><br><br><span class="hljs-comment"># 执行时间</span><br><span class="hljs-attribute">real</span><span class="hljs-number">0</span>m42.<span class="hljs-number">267</span>s<br><span class="hljs-attribute">user</span><span class="hljs-number">0</span>m6.<span class="hljs-number">756</span>s<br><span class="hljs-attribute">sys</span><span class="hljs-number">0</span>m33.<span class="hljs-number">973</span>s<br><br></code></pre></td></tr></table></figure><p><strong>2、测试rsync删除</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 先创建一个空目录new_dir</span><br><br><span class="hljs-comment"># 然后执行 </span><br><span class="hljs-attribute">time</span> rsync -a --delete-before new_dir/ need_delete/<br><br><span class="hljs-comment"># 只需要几秒钟，速度非常快</span><br><span class="hljs-attribute">real</span><span class="hljs-number">0</span>m8.<span class="hljs-number">146</span>s<br><span class="hljs-attribute">user</span><span class="hljs-number">0</span>m0.<span class="hljs-number">216</span>s<br><span class="hljs-attribute">sys</span><span class="hljs-number">0</span>m7.<span class="hljs-number">127</span>s<br><br></code></pre></td></tr></table></figure><p><strong>3、测试 rm -rf 删除</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">time</span> rm -rf need_delete/<br><br><span class="hljs-attribute">real</span><span class="hljs-number">0</span>m9.<span class="hljs-number">639</span>s<br><span class="hljs-attribute">user</span><span class="hljs-number">0</span>m0.<span class="hljs-number">143</span>s<br><span class="hljs-attribute">sys</span><span class="hljs-number">0</span>m8.<span class="hljs-number">250</span>s<br></code></pre></td></tr></table></figure><h3 id="六、rsyncd-conf-详解"><a href="#六、rsyncd-conf-详解" class="headerlink" title="六、rsyncd.conf 详解"></a>六、rsyncd.conf 详解</h3><h4 id="1、全局参数"><a href="#1、全局参数" class="headerlink" title="1、全局参数"></a>1、全局参数</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 在独立运行时，用于指定的服务器运行的 IP 地址</span><br>address = IP<br><br><span class="hljs-comment"># 监听端口</span><br>port = <span class="hljs-number">873</span> <br><br><span class="hljs-comment"># rsync 的守护进程将其 PID 写入指定的文件</span><br>pid <span class="hljs-built_in">file</span> = /var/<span class="hljs-built_in">run</span>/rsyncd.pid<br><br><span class="hljs-comment"># 指定支持 max connections 参数的锁文件</span><br>lock <span class="hljs-built_in">file</span> = /var/<span class="hljs-built_in">run</span>/rsync.lock<br><br><span class="hljs-comment"># 指定 rsync 守护进程的日志文件，而不将日志发送给 syslog</span><br><span class="hljs-built_in">log</span> <span class="hljs-built_in">file</span> = /var/<span class="hljs-built_in">log</span>/rsyncd.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#========== 控制参数 =============#</span><br> <span class="hljs-comment"># 以指定的 UID 传输文件</span><br>uid = rsync        <br><br><span class="hljs-comment"># 指定该模块以指定的 GID 传输文件。</span><br>gid = rsync                     <br><br><span class="hljs-comment"># 禁锢推送的数据至某个目录, 不允许跳出该目录,</span><br><span class="hljs-comment"># 默认为 yes，则 rsync 在传输文件之前首先 chroot 到 path 参数所指定的目录下</span><br><span class="hljs-comment"># 这样做的原因是实现额外的安全防护，但是缺点是需要 root 权限</span><br><span class="hljs-comment"># 并且不能备份指向 path 外部的符号连接所指向的目录文件</span><br>use chroot = no                <br><br><span class="hljs-comment"># 无需让rsync以root身份运行，允许接收文件的完整属性</span><br>fake super = yes                <br><br><span class="hljs-comment"># 大并发连接数量以保护服务器，超过限制的连接请求将被告知随后再试</span><br><span class="hljs-comment"># 默认为0 （没有限制）</span><br>max connections = <span class="hljs-number">200</span><br><br><span class="hljs-comment"># 超时时间</span><br><span class="hljs-keyword">timeout</span> = <span class="hljs-number">600</span>                  <br><br><span class="hljs-comment"># 指定在 rsync 服务器上运行 delete 操作时是否忽略 I/O 错误。</span><br><span class="hljs-comment"># 一般来说 rsync 在出现 I/O 错误时将将跳过 –delete 操作</span><br><span class="hljs-comment"># 以防止因为暂时的资源不足或其它 I/O 错误导致的严重问题。</span><br>ignore errors <br><br><span class="hljs-comment"># 指定是否允许客户上传文件。</span><br><span class="hljs-comment"># 默认为true，不允许用户上传文件，</span><br><span class="hljs-comment"># 若为 false 并且服务器目录也具有读写权限则允许上传。</span><br><span class="hljs-built_in">read</span> only = <span class="hljs-literal">false</span> <br><br><span class="hljs-comment"># 指定当客户请求列出可以使用的模块列表时，该模块是否应该被列出。</span><br><span class="hljs-comment"># 默认为 true，如果设置该选项为 false，可以创建隐藏的模块</span><br><span class="hljs-built_in">list</span> = <span class="hljs-literal">false</span>                  <br><br></code></pre></td></tr></table></figure><p>2、模块参数<br>模块参数主要用于定义 rsync 服务器哪个目录要被同步。</p><p>模块声明的格式必须为 [module] 形式，这个名字就是在 rsync 客户端看到的名字，类似于 Samba 服务器提供的共享名。</p><p>而服务器真正同步的数据是通过 path 来指定的。可以根据自己的需要，来指定多个模块，模块中可以定义以下参数：</p><p>基本模块参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 指定模块名</span><br><span class="hljs-section">[backup]</span><br><br><span class="hljs-comment"># 指定当前模块在 rsync 服务器上的同步路径，该参数是必须指定的</span><br><span class="hljs-attr">path</span> = /backup  <br><br><span class="hljs-comment"># 给模块指定一个描述，该描述连同模块名在客户连接得到模块列表时显示给客户</span><br><span class="hljs-attr">comment</span> = commit<br><br></code></pre></td></tr></table></figure><ul><li>模块文件筛选参数</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br># 指定多个由空格隔开的多个文件或目录(相对路径)<br># 并将其添加到 <span class="hljs-keyword">exclude</span> 列表中。这等同于在客户端命令中使用 –<span class="hljs-keyword">exclude</span> 来指定模式。<br><span class="hljs-keyword">exclude</span> = exclude_file<br><br># 指定一个包含 <span class="hljs-keyword">exclude</span> 规则定义的文件名，服务器从该文件中读取 <span class="hljs-keyword">exclude</span> 列表定义<br><span class="hljs-keyword">exclude</span> <span class="hljs-keyword">from</span> = <span class="hljs-keyword">exclude</span>-<span class="hljs-keyword">file</span>.txt<br><br># 指定多个由空格隔开的多个文件或目录(相对路径)，并将其添加到 <span class="hljs-keyword">include</span> 列表中。<br># 这等同于在客户端命令中使用 –<span class="hljs-keyword">include</span> 来指定模式 。<br><span class="hljs-keyword">include</span> = <span class="hljs-keyword">include</span>-<span class="hljs-keyword">file</span>.txt<br><br># 指定一个包含 <span class="hljs-keyword">include</span> 规则定义的文件名，服务器从该文件中读取 <span class="hljs-keyword">include</span> 列表定义<br><span class="hljs-keyword">include</span> <span class="hljs-keyword">from</span> = <span class="hljs-keyword">exclude</span>-<span class="hljs-keyword">file</span>.txt<br><br># 一个模块只能指定一个<span class="hljs-keyword">exclude</span> 参数、一个<span class="hljs-keyword">include</span> 参数<br># 结合 <span class="hljs-keyword">include</span> 和 <span class="hljs-keyword">exclude</span> 可以定义复杂的<span class="hljs-keyword">exclude</span>/<span class="hljs-keyword">include</span> 规则<br># 这几个参数分别与相应的rsync 客户命令选项等价，唯一不同的是它们作用在服务器端<br><br></code></pre></td></tr></table></figure><ul><li>模块用户认证参数</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rsync 默认匿名方式传输</span><br><span class="hljs-comment"># 若只配置匿名访问的 rsync 服务器，则无需设置下述参数</span><br><br><span class="hljs-comment"># 指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块。</span><br><span class="hljs-comment"># 这里的用户和系统用户没有任何关系。用户名和口令以明文方式存放在 secrets file 参数指定的文件中</span><br>auth <span class="hljs-built_in">users</span> = user_name<br><br><span class="hljs-comment"># 指定一个 rsync 认证口令文件。只有在 auth users 被定义时，该文件才起作用</span><br>secrets file = /etc/rsync.passwd<br><br><span class="hljs-comment"># rsync 认证口令文件的权限一定是 600，否则客户端将不能连接服务器。</span><br><span class="hljs-comment"># rsync 认证口令文件中每一行指定一个 用户名:口令 对，格式为：</span><br><span class="hljs-comment"># username:passwd</span><br><br><span class="hljs-comment"># 一般来说口令最好不要超过8个字符</span><br><br><span class="hljs-comment"># 一个rsync配置文件中可以包含多个认证模块，同时一个密码文件中也可以存放多个用户和其对应的密码。</span><br><span class="hljs-comment"># 其中每一个认证模块可以对应不同的客户端。</span><br></code></pre></td></tr></table></figure><p>​</p></li></ul></li></ul><p>同步命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">rsync -r -avz <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker /m</span>edia<span class="hljs-regexp">/pi/</span>Elements<span class="hljs-regexp">/docker_data/</span><br><br>rsync -r -avz <span class="hljs-regexp">/data /m</span>edia<span class="hljs-regexp">/pi/</span>Elements<span class="hljs-regexp">/har/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux, rsync</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4b部署Harbor-arm64版本</title>
    <link href="/2023/11/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2harbor_arm64/"/>
    <url>/2023/11/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2harbor_arm64/</url>
    
    <content type="html"><![CDATA[<h2 id="树莓派4b部署Harbor-arm64版本"><a href="#树莓派4b部署Harbor-arm64版本" class="headerlink" title="树莓派4b部署Harbor-arm64版本"></a>树莓派4b部署Harbor-arm64版本</h2><p><a href="https://github.com/hzliangbin/harbor-arm64/releases/tag/v1.9.3">harbor-arm版本</a></p><p>部署：<a href="https://blog.csdn.net/weixin_47003048/article/details/109127568">参考</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/hzliangbin/harbor-arm64/releases/download/v1.9.3/harbor-offline-installer-v1.9.3.tgz<br>tar -xf harbor-offline-installer-v1.9.3.tgz -C /opt/<br><span class="hljs-built_in">cp</span> /opt/harbor/harbor.yml.tmpl /opt/harbor/harbor.yml<br>修改/opt/harbor/harbor.yml中的hostname字段为实际ip地址或者域名<br>注释掉https related config模块(本地环境可以直接使用http)<br>docker load -i /opt/harbor/harbor.v1.9.3.tar.gz<br>bash /opt/harbor/prepare<br>bash /opt/harbor/install.sh<br></code></pre></td></tr></table></figure><h5 id="docker-compose维护命令"><a href="#docker-compose维护命令" class="headerlink" title="docker-compose维护命令"></a>docker-compose维护命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/harbor/<br>启动harbor: docker-compose up -d<br>停止harbor:  docker-compose stop<br>重启harbor: docker-compose restart<br>查看harbor状态: docker-compose ps<br></code></pre></td></tr></table></figure><p>异常:<br>docker-compose harbor harbor-log 报错：Authentication token manipulation error启动报错现象</p><p>docker-copmose up -d 后 harbor-log 无限重启</p><p>查看 harbor-log日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs -f harbor-log<br> <br>sudo: unable to change expired password: Authentication token manipulation error<br>sudo: Account or password is expired, reset your password and try again<br>sudo: a terminal is required to <span class="hljs-built_in">read</span> the password; either use the -S option to <span class="hljs-built_in">read</span> from standard input or configure an askpass helper<br>Changing password <span class="hljs-keyword">for</span> root.<br></code></pre></td></tr></table></figure><p>解决方法：</p><p>1.以tar形式导出容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /tmp/harbor-log<br><span class="hljs-built_in">cd</span> /tmp/harbor-log<br>docker <span class="hljs-built_in">export</span> harbor-log -o harbor-log.tar<br></code></pre></td></tr></table></figure><p>2.解压tar包，修改shadow中的权限（有想深入了解的可以百度“关于&#x2F;etc&#x2F;shadow 文件”）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 解压tar包</span><br>tar xvfp harbor-log.tar<br> <br><span class="hljs-comment"># 修改shadow文件的值</span><br>sed -i <span class="hljs-string">&#x27;s/:90:/:99999:/g&#x27;</span> /tmp/harbor-log/etc/shadow<br></code></pre></td></tr></table></figure><p>3.将修改后的shadow文件挂载到harbor-log容器内</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span>  /root/data/harbor/harbor-log-etc<br> <br><span class="hljs-built_in">cp</span> /tmp/harbor-log/etc/shadow /root/data/harbor/harbor-log-etc/shadow<br></code></pre></td></tr></table></figure><p>4.修改docker-compose.yml中harbor-log容器volumes配置，增加如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">- <span class="hljs-built_in">type</span>: <span class="hljs-built_in">bind</span><br>  <span class="hljs-built_in">source</span>: ./harbor-log-etc/shadow<br>  target: /etc/shadow<br></code></pre></td></tr></table></figure><p>5.重新启动harbor</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose down<br>docker-compose up -d<br></code></pre></td></tr></table></figure><p>#1 外置数据库部署访问(本次部署仅测试使用，生产环境建议高可用方式部署)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">192.168.1.111: redis、postgresql<br><span class="hljs-comment">#redis</span><br><span class="hljs-built_in">mkdir</span> -p /opt/redis/conf/<br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt; /opt/redis/conf/redis.conf</span><br><span class="hljs-string">#bind 127.0.0.1</span><br><span class="hljs-string">protected-mode no appendonly yes</span><br><span class="hljs-string">requirepass duan@1994</span><br><span class="hljs-string">EOF</span><br><br>docker run -itd --restart=always -p 6379:6379 --name redis-server -v /opt/redis/conf:/usr/local/etc/redis -v /data/redis/data:/data -d redis:6.0.10 redis-server /usr/local/etc/redis/redis.conf<br><br><span class="hljs-comment">#postgresql</span><br>docker run -itd --restart=always -p 5432:5432 --name postgresql -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=duan@1994 postgres:13.1<br><br>登录pgsql创建用户和数据库<br>docker <span class="hljs-built_in">exec</span> -it postgresql bash<br>create user harbor with password <span class="hljs-string">&#x27;harborDB&#x27;</span>;<br>create database harbor;<br>create database harbor_clair;<br>create database harbor_notary_server;<br>create database harbor_notary_signer;<br>GRANT ALL PRIVILEGES ON DATABASE harbor to harbor;<br>GRANT ALL PRIVILEGES ON DATABASE harbor_clair to harbor;<br>GRANT ALL PRIVILEGES ON DATABASE harbor_notary_server to harbor;<br>GRANT ALL PRIVILEGES ON DATABASE harbor_notary_signer to harbor;<br><br></code></pre></td></tr></table></figure><p>#2 部署minio(本次部署仅测试使用，生产环境建议高可用方式部署)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker run -d -p 11000:9000 -p 11001:9090 --net=host --name minio -e <span class="hljs-string">&quot;MINIO_ACCESS_KEY=minioadmin&quot;</span> -e <span class="hljs-string">&quot;MINIO_SECRET_KEY=minioadmin@131008&quot;</span> -v /media/pi/Elements/minio/data:/data -v /media/pi/Elements/minio/config:/root/.minio minio/minio server /data --console-address <span class="hljs-string">&quot;:11001&quot;</span> -address <span class="hljs-string">&quot;:11000&quot;</span><br></code></pre></td></tr></table></figure><p>#3 配置harbor.yaml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Configuration file of Harbor</span><br><br><span class="hljs-comment"># The IP address or hostname to access admin UI and registry service.</span><br><span class="hljs-comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span><br>hostname: 192.168.86.5<br><br><span class="hljs-comment"># http related config</span><br>http:<br>  <span class="hljs-comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span><br>  port: 80<br><br><span class="hljs-comment"># https related config</span><br><span class="hljs-comment">#https:</span><br><span class="hljs-comment">#  # https port for harbor, default is 443</span><br><span class="hljs-comment">#  port: 443</span><br><span class="hljs-comment">#  # The path of cert and key files for nginx</span><br><span class="hljs-comment">#  certificate: /your/certificate/path</span><br><span class="hljs-comment">#  private_key: /your/private/key/path</span><br><br><span class="hljs-comment"># # Uncomment following will enable tls communication between all harbor components</span><br><span class="hljs-comment"># internal_tls:</span><br><span class="hljs-comment">#   # set enabled to true means internal tls is enabled</span><br><span class="hljs-comment">#   enabled: true</span><br><span class="hljs-comment">#   # put your cert and key files on dir</span><br><span class="hljs-comment">#   dir: /etc/harbor/tls/internal</span><br><br><span class="hljs-comment"># Uncomment external_url if you want to enable external proxy</span><br><span class="hljs-comment"># And when it enabled the hostname will no longer used</span><br><span class="hljs-comment"># external_url: https://reg.mydomain.com:8433</span><br><br><span class="hljs-comment"># The initial password of Harbor admin</span><br><span class="hljs-comment"># It only works in first time to install harbor</span><br><span class="hljs-comment"># Remember Change the admin password from UI after launching Harbor.</span><br>harbor_admin_password: Harbor12345<br><br><span class="hljs-comment"># Harbor DB configuration</span><br>database:<br>  <span class="hljs-comment"># The password for the root user of Harbor DB. Change this before any production use.</span><br>  password: root123<br>  <span class="hljs-comment"># The maximum number of connections in the idle connection pool. If it &lt;=0, no idle connections are retained.</span><br>  max_idle_conns: 50<br>  <span class="hljs-comment"># The maximum number of open connections to the database. If it &lt;= 0, then there is no limit on the number of open connections.</span><br>  <span class="hljs-comment"># Note: the default number of connections is 1024 for postgres of harbor.</span><br>  max_open_conns: 1000<br><br><span class="hljs-comment"># The default data volume</span><br>data_volume: /data<br><br><span class="hljs-comment"># Harbor Storage settings by default is using /data dir on local filesystem</span><br><span class="hljs-comment"># Uncomment storage_service setting If you want to using external storage</span><br><span class="hljs-comment"># storage_service:</span><br><span class="hljs-comment">#   # ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore</span><br><span class="hljs-comment">#   # of registry&#x27;s and chart repository&#x27;s containers.  This is usually needed when the user hosts a internal storage with self signed certificate.</span><br><span class="hljs-comment">#   ca_bundle:</span><br><br><span class="hljs-comment">#   # storage backend, default is filesystem, options include filesystem, azure, gcs, s3, swift and oss</span><br><span class="hljs-comment">#   # for more info about this configuration please refer https://docs.docker.com/registry/configuration/</span><br><span class="hljs-comment">#   filesystem:</span><br><span class="hljs-comment">#     maxthreads: 100</span><br><span class="hljs-comment">#   # set disable to true when you want to disable registry redirect</span><br><span class="hljs-comment">#   redirect:</span><br><span class="hljs-comment">#     disabled: false</span><br>storage_service:<br>    s3:<br>      accesskey: admin<br>      secretkey: admin123456<br>      region: us-east-1<br>      regionendpoint: http://192.168.86.6:9000（新版本用9001）<br>      bucket: harbor-registry<br>      encrypt: <span class="hljs-literal">false</span><br>      secure: <span class="hljs-literal">false</span><br>      v4auth: <span class="hljs-literal">true</span><br>      chunksize: 5242880<br>      rootdirectory: /<br><br><br><span class="hljs-comment"># Clair configuration</span><br>clair:<br>  <span class="hljs-comment"># The interval of clair updaters, the unit is hour, set to 0 to disable the updaters.</span><br>  updaters_interval: 12<br><br><span class="hljs-comment"># Trivy configuration</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Trivy DB contains vulnerability information from NVD, Red Hat, and many other upstream vulnerability databases.</span><br><span class="hljs-comment"># It is downloaded by Trivy from the GitHub release page https://github.com/aquasecurity/trivy-db/releases and cached</span><br><span class="hljs-comment"># in the local file system. In addition, the database contains the update timestamp so Trivy can detect whether it</span><br><span class="hljs-comment"># should download a newer version from the Internet or use the cached one. Currently, the database is updated every</span><br><span class="hljs-comment"># 12 hours and published as a new release to GitHub.</span><br>trivy:<br>  <span class="hljs-comment"># ignoreUnfixed The flag to display only fixed vulnerabilities</span><br>  ignore_unfixed: <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># skipUpdate The flag to enable or disable Trivy DB downloads from GitHub</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># You might want to enable this flag in test or CI/CD environments to avoid GitHub rate limiting issues.</span><br>  <span class="hljs-comment"># If the flag is enabled you have to download the `trivy-offline.tar.gz` archive manually, extract `trivy.db` and</span><br>  <span class="hljs-comment"># `metadata.json` files and mount them in the `/home/scanner/.cache/trivy/db` path.</span><br>  skip_update: <span class="hljs-literal">false</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># insecure The flag to skip verifying registry certificate</span><br>  insecure: <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># github_token The GitHub access token to download Trivy DB</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># Anonymous downloads from GitHub are subject to the limit of 60 requests per hour. Normally such rate limit is enough</span><br>  <span class="hljs-comment"># for production operations. If, for any reason, it&#x27;s not enough, you could increase the rate limit to 5000</span><br>  <span class="hljs-comment"># requests per hour by specifying the GitHub access token. For more details on GitHub rate limiting please consult</span><br>  <span class="hljs-comment"># https://developer.github.com/v3/#rate-limiting</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># You can create a GitHub token by following the instructions in</span><br>  <span class="hljs-comment"># https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># github_token: xxx</span><br><br>jobservice:<br>  <span class="hljs-comment"># Maximum number of job workers in job service</span><br>  max_job_workers: 10<br><br>notification:<br>  <span class="hljs-comment"># Maximum retry count for webhook job</span><br>  webhook_job_max_retry: 10<br><br>chart:<br>  <span class="hljs-comment"># Change the value of absolute_url to enabled can enable absolute url in chart</span><br>  absolute_url: disabled<br><br><span class="hljs-comment"># Log configurations</span><br><span class="hljs-built_in">log</span>:<br>  <span class="hljs-comment"># options are debug, info, warning, error, fatal</span><br>  level: info<br>  <span class="hljs-comment"># configs for logs in local storage</span><br>  <span class="hljs-built_in">local</span>:<br>    <span class="hljs-comment"># Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.</span><br>    rotate_count: 50<br>    <span class="hljs-comment"># Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.</span><br>    <span class="hljs-comment"># If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G</span><br>    <span class="hljs-comment"># are all valid.</span><br>    rotate_size: 200M<br>    <span class="hljs-comment"># The directory on your host that store log</span><br>    location: /var/log/harbor<br><br>  <span class="hljs-comment"># Uncomment following lines to enable external syslog endpoint.</span><br>  <span class="hljs-comment"># external_endpoint:</span><br>  <span class="hljs-comment">#   # protocol used to transmit log to external endpoint, options is tcp or udp</span><br>  <span class="hljs-comment">#   protocol: tcp</span><br>  <span class="hljs-comment">#   # The host of external endpoint</span><br>  <span class="hljs-comment">#   host: localhost</span><br>  <span class="hljs-comment">#   # Port of external endpoint</span><br>  <span class="hljs-comment">#   port: 5140</span><br><br><span class="hljs-comment">#This attribute is for migrator to detect the version of the .cfg file, DO NOT MODIFY!</span><br>_version: 2.0.0<br><br><span class="hljs-comment"># Uncomment external_database if using external database.</span><br>external_database:<br>  harbor:<br>    host: 192.168.1.111<br>    port: 5432<br>    db_name: harbor<br>    username: harbor<br>    password: harborDB<br>    ssl_mode: <span class="hljs-built_in">disable</span><br>    max_idle_conns: 2<br>    max_open_conns: 0<br>  clair:<br>    host: 192.168.1.111<br>    port: 5432<br>    db_name: clair<br>    username: harbor<br>    password: harborDB<br>    ssl_mode: <span class="hljs-built_in">disable</span><br>  notary_signer:<br>    host: 192.168.1.111<br>    port: 5432<br>    db_name: notary_signer<br>    username: harbor<br>    password: harborDB<br>    ssl_mode: <span class="hljs-built_in">disable</span><br>  notary_server:<br>    host: 192.168.1.111<br>    port: 5432<br>    db_name: notary_server<br>    username: harbor<br>    password: harborDB<br>    ssl_mode: <span class="hljs-built_in">disable</span><br><br><span class="hljs-comment"># Uncomment external_redis if using external Redis server</span><br>external_redis:<br>  <span class="hljs-comment"># support redis, redis+sentinel</span><br>  <span class="hljs-comment"># host for redis: &lt;host_redis&gt;:&lt;port_redis&gt;</span><br>  <span class="hljs-comment"># host for redis+sentinel:</span><br>  <span class="hljs-comment">#  &lt;host_sentinel1&gt;:&lt;port_sentinel1&gt;,&lt;host_sentinel2&gt;:&lt;port_sentinel2&gt;,&lt;host_sentinel3&gt;:&lt;port_sentinel3&gt;</span><br>  host: 192.168.1.111:6379<br>  password: duan@1994<br>  <span class="hljs-comment"># sentinel_master_set must be set to support redis+sentinel</span><br>  <span class="hljs-comment">#sentinel_master_set:</span><br>  <span class="hljs-comment"># db_index 0 is for core, it&#x27;s unchangeable</span><br>  registry_db_index: 1<br>  jobservice_db_index: 2<br>  chartmuseum_db_index: 3<br>  clair_db_index: 4<br>  trivy_db_index: 5<br>  idle_timeout_seconds: 30<br><br><span class="hljs-comment"># Uncomment uaa for trusting the certificate of uaa instance that is hosted via self-signed cert.</span><br><span class="hljs-comment"># uaa:</span><br><span class="hljs-comment">#   ca_file: /path/to/ca</span><br><br><span class="hljs-comment"># Global proxy</span><br><span class="hljs-comment"># Config http proxy for components, e.g. http://my.proxy.com:3128</span><br><span class="hljs-comment"># Components doesn&#x27;t need to connect to each others via http proxy.</span><br><span class="hljs-comment"># Remove component from `components` array if want disable proxy</span><br><span class="hljs-comment"># for it. If you want use proxy for replication, MUST enable proxy</span><br><span class="hljs-comment"># for core and jobservice, and set `http_proxy` and `https_proxy`.</span><br><span class="hljs-comment"># Add domain to the `no_proxy` field, when you want disable proxy</span><br><span class="hljs-comment"># for some special registry.</span><br>proxy:<br>  http_proxy:<br>  https_proxy:<br>  no_proxy:<br>  components:<br>    - core<br>    - jobservice<br>    - clair<br>    - trivy<br><br></code></pre></td></tr></table></figure><h5 id="访问harbor-192-168-1-111认用户名密码admin-Harbor12345"><a href="#访问harbor-192-168-1-111认用户名密码admin-Harbor12345" class="headerlink" title="访问harbor 192.168.1.111认用户名密码admin&#x2F;Harbor12345"></a>访问harbor 192.168.1.111认用户名密码admin&#x2F;Harbor12345</h5><p><img src="http://47.119.16.215:11000/images/blog/local023_169064571268641.png" alt="image-20230729234830744"></p><p>docker push 异常:</p><p>docker 在push镜像到本地registry出现的500 Internal Server Error<br><img src="http://47.119.16.215:11000/images/blog/local023_169070580018729.png" alt="image-20230730162958323"></p><p>原因一:<br> 镜像目录不符合要求：应该是两级目录以上才可以的， 如:<br>192.168.1.111:5000&#x2F;postgres:latest  不符合要求<br>192.168.1.111:5000&#x2F;lvyuanj&#x2F;postgres:latest   符合要求</p><p>Docker push时报错：Docker denied: requested access to the resource is denied的解决办法</p><p>请遵循这两种解决方法</p><p>（1）解决方案 1：<br>  首先，检查您的 docker hub 凭据是否输入了正确的凭据。</p><p>如果您输入的密码正确，则此错误仍然存在，请尝试注销并使用您的凭据重新登录。</p><p>对于注销使用，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">logout</span><br></code></pre></td></tr></table></figure><p>再次登录使用，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker login<br></code></pre></td></tr></table></figure><p>在某些情况下，此解决方案可能有效。</p><p>解决方案 2：</p><p>如果仍然如此，您在尝试解决方案 1 后仍收到此错误，您必须按照此解决方案来清除错误。</p><p>YOUR_DOCKERHUB_NAME  必须是自己harbor域名或者ip:port  例：自己私有harbor  192.168.1.111:5000</p><p>首先，登录后你必须在推送之前标记你的图像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag image_name YOUR_DOCKERHUB_NAME/image_name<br></code></pre></td></tr></table></figure><p>然后，你必须推动它。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker push YOUR_DOCKERHUB_NAME/image_name<br></code></pre></td></tr></table></figure><p>完成此操作后，您将能够将 docker 镜像推送到您的存储库中，错误将消失。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux, docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
